{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\n\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\n\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","levels","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","clearEmbedHost","getEmbedHost","clearAPIKey","getAPIKey","_url","transaction","name","url","span","op","response","fetch","headers","promiseTimeout","timeout","id","setTimeout","clearTimeout","reject","ms","Promise","get","options_","customOptions","defaultOptions","mode","getApiKeyHeaders","options","merge","method","fetchAndTrace","debugLogResponse","post","data","JSON","patch","remove","generateJsonRPCObject","jsonrpc","params","parameters","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}